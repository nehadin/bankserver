Server Creation
..................

                Install Express: 
                command in cmd prompt  ->    npm i express
                                           i-install

1. Import Express

       * all the import elements will be on top of the complied
       * everything is imported with :
            require()
            - the value inside require function wil in be in strings
            - and aything imported has to be stored inside some variable:
                    const vari_name= require("filename")
                 eg: const app= require("express")


2. Create an app using Express
// simply calling the express() function will create an express app, as 'express' function is created by Express module

3. Create port number for the server to run
        (3000)
4. Create requests according to our project


        unlike angular the express serve will not get auto complied .....here it has to be recomplied each time whnever any changes are made
        To solve this we use a differnt node version    -   nodemon
                - npm i -g nodemon          ----- command to install nodemon
                        i-install  g-global

        the data in server will be of JSON formate, hence the responses will not be in readable format
        A new package has to be imported - express.json()
        syntax: app.use(express.json())

get
// the GET , will have one request argument  and a response argument
// SEND method is used for sending any responses


nodemon Server
.................

- npm i -g nodemon



User Authentication using express
...................................



        JWT token (Json Web Token)
        ..............................

jsonwebtoken    - Library               
                  install-       npm i jsonwebtoken
                                the verson will be in 'package.json'
                             enter in dataservice.js -   const jwt = require("jsonwebtoken")
sign()          - method used to generate token3-*]P-[]
                  the method accepts 2 arguments - (payload: string | object| buffer, seceretOPrivatker: jwt.secret)

* the token will be generated only while a user login\
* so that it ensures only the logged in user can do the transaction and no others



        MIDDLEWARE
.........................
* Middlewares have the ability to control server requests
* its a funtion with 3 arguments (request,response,next)

2 types: 
        1.Application Specific Middlewares
                        while executing first the middleware will be executed, and after that the remaning codes will be executed, if there is any issue with middleware, then the next line codes will not be to executed
        2.Router Specific Middleware



Solving run-time errors in JS
................................

try catch

try{
        error causing code
}
catch{
        solution
}






.............
  MONGO DB
..............



- mongodb server
- shell commands in mongodb

        - to see the databases(will display all the databases available)
                > show dbs
        - to open any databases
                > use database_name
        - a database will have many collections inside it, to display the collections in it
                > show collections
        - collections will have many data, to view those data inside a specific collection,ie., entire data
                > db.collection_name.find()
        - to display a specific data inside colection and not all data,ie., specific or single date
                > db.collection_name.findOne({unique_data_to_identy})
                > db.bank.findOne({acno})
        - to insert new data
                > db.collection_name.insertOne({data})
        - to view any single data as per any condition
                > db.collection_name.find({condition})
        - to delete,
                - specific or single data
                        > db.collection_name.deleteOne({data})
                        - delete count : it returns a number saying how many values are deleted.
                                        if the said data is avialable it will have value 1
                                        if again requesting to delete the same data the value will be 0
        - update
                > db.collection_name.updateOne({old value/data},{new value/data}) 
                                                ({uname:'anu'},{uname:'anu.v'})

CRUD - create read update delete



Mongodb is unstructured data, 
        ie., even if we miss or keep any field blank it will be accepted, will not generate any error

MongoDB Operators
------------------
        -$gt - greater than
        -$lt - less than
        -$eq - equal to




Serve MonogoDB integration
..........................


- mongoose - Library required to intergate server and database (integrate MongoDB and server)
                install command
                > npm i monngoose



Server mdb integration
..........................
        1. import mongoose
        2. State connection string via mongoose
        3. Define a bank database Model
        4. Finally export the schema to use it in other files



....................
INTEGRATION
`````````````````````



ANGUALR SERVER INTEGRATION / FRONTEND - BACKEND INTEGRATION
_____________________________________________________________
--------------------------------------------------------------

angular running port - 4200
server port - 3000

both has to be integrated

CORS (Cross Orgin Resource Sharing)
____________________________________
Module for intergating Angular and node         npm i cors

* importing cors in 'index.js'
        const cors=require('cors')      //import cors

* after app creation , we need to connect to cors 
        app.use(cors({origin:'http://localhost:4200'}))     //connecting cors  

